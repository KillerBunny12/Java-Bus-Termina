/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Grafica;

import Arbol.ArbolTurismo;
import Colas.ColaBus;
import Datos.Transportedatos;
import Entidades.Transporte;
import Nodo.NodoBus;
import Nodo.NodoTurismo;
import java.time.LocalTime;
import java.util.ArrayList;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author david
 */
public class FrameTerminalBus extends javax.swing.JFrame {

    /**
     * Creates new form FrameTerminalBus
     */
    public FrameTerminalBus() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTpMENUS = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTxtEstacionamiento = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTxtOrdenamientoturismo = new javax.swing.JTextArea();
        jBtnMenorMayor = new javax.swing.JButton();
        jBtnMayorMenor = new javax.swing.JButton();
        jLblListaturismo = new javax.swing.JLabel();
        jCbbListaturismo = new javax.swing.JComboBox<>();
        jBtnAlquilarTurismo = new javax.swing.JButton();
        jBtnRegresar = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTxtNombrePasajeros = new javax.swing.JTextArea();
        jLblPasajerosactuales = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jTxtID = new javax.swing.JTextField();
        jTxtTipo = new javax.swing.JTextField();
        jTxtFil = new javax.swing.JTextField();
        jTxtCol = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTblMantenimiento = new javax.swing.JTable();
        jLblPlaca = new javax.swing.JLabel();
        jLblTipo = new javax.swing.JLabel();
        jLblFilas = new javax.swing.JLabel();
        jLblColumnas = new javax.swing.JLabel();
        jLblMantenimiento = new javax.swing.JLabel();
        jBtnAgregar = new javax.swing.JButton();
        jBtnModificar = new javax.swing.JButton();
        jBtnEliminar = new javax.swing.JButton();
        jBtnLimpiar = new javax.swing.JButton();
        jPnlRutabus = new javax.swing.JPanel();
        jLblTerminal1Bus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTxtTerminal1bus = new javax.swing.JTextArea();
        jLblRutaBus = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTxtRutabus = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTxtTerminal2bus = new javax.swing.JTextArea();
        jLblTerminal2bus = new javax.swing.JLabel();
        jBtnActualizarrutabus = new javax.swing.JButton();
        jBtnSalirBus1 = new javax.swing.JButton();
        jBtnSalirRutaBus = new javax.swing.JButton();
        jBtnSalirterminalbus2 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTxtEstadoBus = new javax.swing.JTextArea();
        jLblEstadoBus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTxtEstacionamiento.setEditable(false);
        jTxtEstacionamiento.setColumns(20);
        jTxtEstacionamiento.setRows(5);
        jScrollPane8.setViewportView(jTxtEstacionamiento);

        jLabel1.setText("Estacionamiento");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel1)))
                .addContainerGap(347, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(46, 46, 46)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        jTpMENUS.addTab("Estacionamiento", jPanel5);

        jTxtOrdenamientoturismo.setColumns(20);
        jTxtOrdenamientoturismo.setRows(5);
        jScrollPane6.setViewportView(jTxtOrdenamientoturismo);

        jBtnMenorMayor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/big.png"))); // NOI18N
        jBtnMenorMayor.setText("Ordenar menor a mayor");
        jBtnMenorMayor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnMenorMayorActionPerformed(evt);
            }
        });

        jBtnMayorMenor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/small.png"))); // NOI18N
        jBtnMayorMenor.setText("Ordenar mayor a menor");
        jBtnMayorMenor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnMayorMenorActionPerformed(evt);
            }
        });

        jLblListaturismo.setText("Seleccione una buseta");

        jCbbListaturismo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCbbListaturismoItemStateChanged(evt);
            }
        });

        jBtnAlquilarTurismo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/request.png"))); // NOI18N
        jBtnAlquilarTurismo.setText("Pedir");
        jBtnAlquilarTurismo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAlquilarTurismoActionPerformed(evt);
            }
        });

        jBtnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/getback.png"))); // NOI18N
        jBtnRegresar.setText("Regresar");
        jBtnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRegresarActionPerformed(evt);
            }
        });

        jTxtNombrePasajeros.setEditable(false);
        jTxtNombrePasajeros.setColumns(20);
        jTxtNombrePasajeros.setRows(5);
        jScrollPane7.setViewportView(jTxtNombrePasajeros);

        jLblPasajerosactuales.setText("Nombres de pasajeros actuales");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jBtnMenorMayor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBtnMayorMenor)))
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLblListaturismo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCbbListaturismo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(108, 108, 108)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jBtnRegresar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBtnAlquilarTurismo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jLblPasajerosactuales)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBtnMenorMayor)
                            .addComponent(jBtnMayorMenor))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(jLblListaturismo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCbbListaturismo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBtnAlquilarTurismo))
                        .addGap(17, 17, 17)
                        .addComponent(jBtnRegresar)
                        .addGap(21, 21, 21)
                        .addComponent(jLblPasajerosactuales)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        jTpMENUS.addTab("Ruta Turismo", jPanel6);

        jTblMantenimiento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Placa", "Tipo", "Filas", "Columnas", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTblMantenimiento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTblMantenimientoFocusGained(evt);
            }
        });
        jTblMantenimiento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTblMantenimientoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTblMantenimiento);

        jLblPlaca.setText("Placa");

        jLblTipo.setText("Tipo");

        jLblFilas.setText("Filas");

        jLblColumnas.setText("Columnas");

        jLblMantenimiento.setFont(new java.awt.Font("Lato Heavy", 0, 18)); // NOI18N
        jLblMantenimiento.setText("Mantenimiento");

        jBtnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/addsmall.png"))); // NOI18N
        jBtnAgregar.setText("Agregar");
        jBtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnAgregarActionPerformed(evt);
            }
        });

        jBtnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/modifysmall.png"))); // NOI18N
        jBtnModificar.setText("Modificar");
        jBtnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnModificarActionPerformed(evt);
            }
        });

        jBtnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/clearsmall.png"))); // NOI18N
        jBtnEliminar.setText("Eliminar");
        jBtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEliminarActionPerformed(evt);
            }
        });

        jBtnLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/clearsmall.png"))); // NOI18N
        jBtnLimpiar.setText("Limpiar");
        jBtnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jLblPlaca)
                                .addGap(18, 18, 18)
                                .addComponent(jTxtID, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLblTipo)
                                .addGap(5, 5, 5)
                                .addComponent(jTxtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLblFilas)
                                .addGap(18, 18, 18)
                                .addComponent(jTxtFil, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLblColumnas)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTxtCol, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)
                                .addComponent(jLblMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jBtnAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtnModificar)
                                .addGap(18, 18, 18)
                                .addComponent(jBtnEliminar)
                                .addGap(38, 38, 38)
                                .addComponent(jBtnLimpiar)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTxtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTxtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTxtFil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTxtCol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLblPlaca)
                            .addComponent(jLblTipo)
                            .addComponent(jLblFilas)
                            .addComponent(jLblColumnas)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLblMantenimiento, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnAgregar)
                    .addComponent(jBtnModificar)
                    .addComponent(jBtnEliminar)
                    .addComponent(jBtnLimpiar))
                .addGap(22, 22, 22))
        );

        jTpMENUS.addTab("Mantenimiento", jPanel1);

        jLblTerminal1Bus.setText("Terminal 1");

        jTxtTerminal1bus.setEditable(false);
        jTxtTerminal1bus.setColumns(20);
        jTxtTerminal1bus.setRows(5);
        jScrollPane1.setViewportView(jTxtTerminal1bus);

        jLblRutaBus.setText("Ruta");

        jTxtRutabus.setEditable(false);
        jTxtRutabus.setColumns(20);
        jTxtRutabus.setRows(5);
        jScrollPane3.setViewportView(jTxtRutabus);

        jTxtTerminal2bus.setEditable(false);
        jTxtTerminal2bus.setColumns(20);
        jTxtTerminal2bus.setRows(5);
        jScrollPane4.setViewportView(jTxtTerminal2bus);

        jLblTerminal2bus.setText("Terminal 2");

        jBtnActualizarrutabus.setText("Actualizar");
        jBtnActualizarrutabus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnActualizarrutabusActionPerformed(evt);
            }
        });

        jBtnSalirBus1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/right.png"))); // NOI18N
        jBtnSalirBus1.setText("Salir de la terminal");
        jBtnSalirBus1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSalirBus1ActionPerformed(evt);
            }
        });

        jBtnSalirRutaBus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/between.png"))); // NOI18N
        jBtnSalirRutaBus.setText("Ir al siguiente terminal");
        jBtnSalirRutaBus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSalirRutaBusActionPerformed(evt);
            }
        });

        jBtnSalirterminalbus2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/left.png"))); // NOI18N
        jBtnSalirterminalbus2.setText("Salir de la terminal");
        jBtnSalirterminalbus2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSalirterminalbus2ActionPerformed(evt);
            }
        });

        jTxtEstadoBus.setEditable(false);
        jTxtEstadoBus.setColumns(20);
        jTxtEstadoBus.setRows(5);
        jScrollPane5.setViewportView(jTxtEstadoBus);

        jLblEstadoBus.setText("Estado de buses");

        javax.swing.GroupLayout jPnlRutabusLayout = new javax.swing.GroupLayout(jPnlRutabus);
        jPnlRutabus.setLayout(jPnlRutabusLayout);
        jPnlRutabusLayout.setHorizontalGroup(
            jPnlRutabusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRutabusLayout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jLblTerminal1Bus)
                .addGap(238, 238, 238)
                .addComponent(jLblRutaBus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLblTerminal2bus)
                .addGap(220, 220, 220))
            .addGroup(jPnlRutabusLayout.createSequentialGroup()
                .addGroup(jPnlRutabusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRutabusLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jBtnActualizarrutabus, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRutabusLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPnlRutabusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jBtnSalirBus1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGap(48, 48, 48)
                        .addGroup(jPnlRutabusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblEstadoBus)
                            .addGroup(jPnlRutabusLayout.createSequentialGroup()
                                .addGroup(jPnlRutabusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jBtnSalirRutaBus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3))
                                .addGap(31, 31, 31)
                                .addGroup(jPnlRutabusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane4)
                                    .addComponent(jBtnSalirterminalbus2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap(194, Short.MAX_VALUE))
        );
        jPnlRutabusLayout.setVerticalGroup(
            jPnlRutabusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPnlRutabusLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(jPnlRutabusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLblTerminal1Bus)
                    .addComponent(jLblRutaBus)
                    .addComponent(jLblTerminal2bus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPnlRutabusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPnlRutabusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnSalirBus1)
                    .addGroup(jPnlRutabusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBtnSalirRutaBus)
                        .addComponent(jBtnSalirterminalbus2)))
                .addGroup(jPnlRutabusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPnlRutabusLayout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jBtnActualizarrutabus, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPnlRutabusLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLblEstadoBus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTpMENUS.addTab("RutaBus", jPnlRutabus);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTpMENUS))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTpMENUS, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        //Se prepara la ejecucion del programa, esto se explica en sus propios metodos.
        this.jTxtID.setEditable(false);

        this.precargar();
        this.llenartabla();
        this.llenarcomboturismo();
        this.actualizarestacionamiento();

        //por defecto los botones de alquilar turismo estan desactivados para evitar errores.
        this.jBtnAlquilarTurismo.setEnabled(false);
        this.jBtnRegresar.setEnabled(false);


    }//GEN-LAST:event_formWindowOpened

    private void jBtnSalirterminalbus2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSalirterminalbus2ActionPerformed

        //Este metodo se usa para enviar objetos a la cola ruta cuando se sale de la terminal 2
        try {
            LocalTime hora = LocalTime.now(); //se obtiene la hora actual

            transporte = this.terminal2.remove(); //se le da el valor al parametro del valor de remover objeto de cola terminal2

            transporte.setSalida(hora); //al parametro se le da la hora de salida creada
            transporte.setEnruta(true); //se define que esta en ruta
            transporte.setEstacionamiento(false); //se define que no esta estacionado

            this.datos.modificar(transporte); //se envia a modificar en los datos

            this.rutabus.add(transporte); //se annade a la cola de ruta

            this.actualizarrutabus();
            this.llenartabla();
            this.actualizarestacionamiento();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No hay buses en la terminal 2");
        }
    }//GEN-LAST:event_jBtnSalirterminalbus2ActionPerformed

    private void jBtnSalirRutaBusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSalirRutaBusActionPerformed
        //Este metodo sirve para salir de la cola 1 y dirigirse o a terminal 1 o a terminal 2

        try {
            LocalTime hora = LocalTime.now(); //se obtiene la hora actual

            transporte = this.rutabus.remove(); //parametro con valor de lo removido de la cola

            transporte.setLlegada(hora); //al parametro se le da la hora de llegada creada
            transporte.setEnruta(false); //se define que no esta en ruta
            transporte.setEstacionamiento(true); //se define que no esta estacionado
            if (transporte.getTerminal() == 0) { //Si es valor de terminal = 0 (VIENE DE TERMINAL 1)
                transporte.setTerminal(1); //Se actualiza el valor de terminal
                this.datos.modificar(transporte); //se envia a modificar

                this.terminal2.add(transporte); //se annade a la cola de terminal 2
            } else {   //Si el valor de terminal = 1 (VIENE DE TERMINAL 2)
                transporte.setTerminal(0); //se actualiza el valor de terminal
                this.datos.modificar(transporte); //se modifica

                this.terminal1.add(transporte); //se annade a la cola de terminal 1
            }

            this.actualizarrutabus();
            this.llenartabla();
            this.actualizarestacionamiento();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No hay buses en la ruta");
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jBtnSalirRutaBusActionPerformed

    private void jBtnSalirBus1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSalirBus1ActionPerformed
//Este metodo se usa para enviar objetos a la cola ruta cuando se sale de la terminal 1
        try {

            LocalTime hora = LocalTime.now(); //se obtiene la hora

            transporte = this.terminal1.remove(); //parametro con el valor de remove de la cola terminal 1

            transporte.setSalida(hora); //se le da al parametro la hora de salida creada
            transporte.setEnruta(true); //se define que esta en ruta
            transporte.setEstacionamiento(false); // se define que no esta estacionado

            this.datos.modificar(transporte); //se modifica

            this.rutabus.add(transporte); //se annade a la cola ruta

            this.actualizarrutabus();
            this.llenartabla();
            this.actualizarestacionamiento();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No hay buses en la terminal 1");
        }

    }//GEN-LAST:event_jBtnSalirBus1ActionPerformed

    private void jBtnActualizarrutabusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnActualizarrutabusActionPerformed
        this.actualizarrutabus();
    }//GEN-LAST:event_jBtnActualizarrutabusActionPerformed

    private void jBtnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnLimpiarActionPerformed
        this.limpiarmantenimiento();
    }//GEN-LAST:event_jBtnLimpiarActionPerformed

    private void jBtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEliminarActionPerformed
        //Este metodo se usa para eliminar del sistema
        try {
            if (!this.jTxtID.getText().isEmpty() && !this.jTxtTipo.getText().isEmpty() && !this.jTxtFil.getText().isEmpty() && !this.jTxtCol.getText().isEmpty()) { //verifica los datos
                for (int i = 0; i < datos.retornarTodos().size(); i++) { //recorre el arraylist de objetos
                    transporte = (Transporte) datos.retornarTodos().get(i); //crea un parametro con el valor de i
                    if (transporte.getPlaca() == Integer.parseInt(this.jTxtID.getText())) { //iguala la ID del parametro con la ID a eliminar

                        this.datos.eliminar(transporte); //elimina el transporte
                        this.arbolturismo.eliminar(transporte); //se elimina el transporte del arbol si existe

                        //BORRAR BUS DE TERMINAL 1    LA EXPLICACION SIRVE PARA LOS OTROS 2
                        ArrayList<Transporte> bus = new ArrayList<Transporte>(); //se crea un arraylist de bus
                        while (!this.terminal1.esVacia()) { //mientras que la cola 1 no este vacia
                            bus.add(this.terminal1.remove()); //annadir todo dentro de la cola al arraylist
                        }
                        for (int j = 0; j < bus.size(); j++) { //se recorre el arraylist
                            if (!bus.isEmpty()) { //si el arraylist no esta vacio
                                Transporte dummy = (Transporte) bus.get(j); //se crea un dummy con el valor de i
                                if (dummy.getPlaca() == transporte.getPlaca()) { //se iguala la placa al parametro eliminado
                                    bus.remove(j); //se remueve el objeto del arraylist
                                }

                            }
                        }
                        for (int j = 0; j < bus.size(); j++) { //se vuelve a recorrer
                            if (!bus.isEmpty()) { //verifica que no este vacio
                                Transporte dummy = (Transporte) bus.get(j); //se crea un dummy
                                this.terminal1.add(dummy); //Se annade todos los objetos de vuelta a terminal 1

                            }
                        }

                        bus.removeAll(bus); //Limpia el arraylist

                        //ELIMINAR OBJETO DE COLA RUTA    EXPLICACION EN ELIMINAR DE COLA TERMINAL 1
                        while (!this.rutabus.esVacia()) {
                            bus.add(this.rutabus.remove());
                        }
                        for (int j = 0; j < bus.size(); j++) {
                            if (!bus.isEmpty()) {
                                Transporte dummy = (Transporte) bus.get(j);
                                if (dummy.getPlaca() == transporte.getPlaca()) {
                                    bus.remove(j);
                                }

                            }
                        }
                        for (int j = 0; j < bus.size(); j++) {
                            if (!bus.isEmpty()) {
                                Transporte dummy = (Transporte) bus.get(j);
                                this.rutabus.add(dummy);

                            }
                        }

                        bus.removeAll(bus);

                        //ELIMINAR OBJETO DE TERMINAL 2    EXPLICACION EN ELIMINAR DE TERMINAL 1
                        while (!this.terminal2.esVacia()) {
                            bus.add(this.terminal2.remove());
                        }
                        for (int j = 0; j < bus.size(); j++) {
                            if (!bus.isEmpty()) {
                                Transporte dummy = (Transporte) bus.get(j);
                                if (dummy.getPlaca() == transporte.getPlaca()) {
                                    bus.remove(j);
                                }

                            }
                        }
                        for (int j = 0; j < bus.size(); j++) {
                            if (!bus.isEmpty()) {
                                Transporte dummy = (Transporte) bus.get(j);
                                this.terminal2.add(dummy);

                            }
                        }

                        bus.removeAll(bus);

                        this.actualizarrutabus();

                    }
                }

                this.llenartabla();
                this.llenarcomboturismo();
                System.out.println("Eliminado exitoso");
                this.limpiarmantenimiento();
                this.actualizarestacionamiento();
            } else {
                JOptionPane.showMessageDialog(null, "Hay datos vacio");
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al Eliminar.  Esta ingresando tipo de dato correcto?");
        }

    }//GEN-LAST:event_jBtnEliminarActionPerformed

    private void jBtnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnModificarActionPerformed
        //Este metodo modifica un transporte existente en el sistema

        try {
            if (!this.jTxtTipo.getText().isEmpty() && !this.jTxtFil.getText().isEmpty() && !this.jTxtCol.getText().isEmpty() && (this.jTxtTipo.getText().equalsIgnoreCase("Bus") || this.jTxtTipo.getText().equalsIgnoreCase("Buseta"))) { //verifica datos
                for (int i = 0; i < datos.retornarTodos().size(); i++) {//recorre los datos
                    transporte = (Transporte) datos.retornarTodos().get(i); //crea un parametro
                    if (transporte.getPlaca() == Integer.parseInt(this.jTxtID.getText())) { //iguala la placa
                        transporte.setAsientofil(Integer.parseInt(this.jTxtFil.getText())); //se modifica las filas
                        transporte.setAsientocol(Integer.parseInt(this.jTxtCol.getText()));//se modifica las columnas
                        transporte.setTipo(this.jTxtTipo.getText()); //se modifica el tipo de transporte
                        transporte.setCantidad(transporte.getAsientofil() * transporte.getAsientocol()); //se modifica la cantidad
                        if (transporte.isEnruta()) { //verifica si esta en ruta
                            transporte.setEnruta(false); //se reestablece los valores originales
                            transporte.setEstacionamiento(true);

                        }
                        this.datos.modificar(transporte); //se modifica

                        //MODIFICAR BUSETA DE ARBOL
                        if (transporte.getTipo().equalsIgnoreCase("buseta")) { //si el tipo es buseta

                            if (this.arbolturismo.modificar(transporte) == false) { //Si el objeto no existe en el arbol
                                this.arbolturismo.insertar(transporte); //Se annade como nuevo nodo
                            }
                        } else {
                            this.arbolturismo.eliminar(transporte); //se elimina
                        }

                        //MODIFICAR DE TERMINAL 1 MISMO METODO QUE ELIMINAR EXPLICACION ARRIBA
                        ArrayList<Transporte> bus = new ArrayList<Transporte>();
                        while (!this.terminal1.esVacia()) {
                            bus.add(this.terminal1.remove());
                        }
                        for (int j = 0; j < bus.size(); j++) {
                            if (!bus.isEmpty()) {
                                Transporte dummy = (Transporte) bus.get(j);
                                if (dummy.getPlaca() == transporte.getPlaca()) {
                                    if (!dummy.getTipo().equalsIgnoreCase("bus")) {
                                        bus.remove(j);
                                    }

                                }

                            }
                        }
                        for (int j = 0; j < bus.size(); j++) {
                            if (!bus.isEmpty()) {
                                Transporte dummy = (Transporte) bus.get(j);
                                this.terminal1.add(dummy);

                            }
                        }
                        if (transporte.getTipo().equalsIgnoreCase("bus")) {
                            this.terminal1.add(transporte);
                        }

                        bus.removeAll(bus);
                        //MODIFICAR DE RUTA MISMO METODO QUE ELIMINAR EXPLICACION ARRIBA
                        while (!this.rutabus.esVacia()) {
                            bus.add(this.rutabus.remove());
                        }
                        for (int j = 0; j < bus.size(); j++) {
                            if (!bus.isEmpty()) {
                                Transporte dummy = (Transporte) bus.get(j);
                                if (dummy.getPlaca() == transporte.getPlaca()) {
                                    if (!dummy.getTipo().equalsIgnoreCase("bus")) {
                                        bus.remove(j);
                                    }
                                }

                            }
                        }
                        for (int j = 0; j < bus.size(); j++) {
                            if (!bus.isEmpty()) {
                                Transporte dummy = (Transporte) bus.get(j);
                                this.rutabus.add(dummy);

                            }
                        }

                        bus.removeAll(bus);
                        //MODIFICAR DE TERMINAL 2 MISMO METODO QUE ELIMINAR EXPLICACION ARRIBA
                        while (!this.terminal2.esVacia()) {
                            bus.add(this.terminal2.remove());
                        }
                        for (int j = 0; j < bus.size(); j++) {
                            if (!bus.isEmpty()) {
                                Transporte dummy = (Transporte) bus.get(j);
                                if (dummy.getPlaca() == transporte.getPlaca()) {
                                    if (!dummy.getTipo().equalsIgnoreCase("bus")) {
                                        bus.remove(j);
                                    }
                                }

                            }
                        }
                        for (int j = 0; j < bus.size(); j++) {
                            if (!bus.isEmpty()) {
                                Transporte dummy = (Transporte) bus.get(j);
                                this.terminal2.add(dummy);

                            }
                        }

                        bus.removeAll(bus);

                        this.actualizarrutabus();

                    }
                }

                this.llenartabla();
                this.llenarcomboturismo();
                System.out.println("Modificado exitoso");
                this.limpiarmantenimiento();
                this.actualizarestacionamiento();
            } else {
                JOptionPane.showMessageDialog(null, "Hay datos vacios o incorrecto valor de Bus o buseta");
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al modificar.  Esta ingresando tipo de dato correcto?");
        }
    }//GEN-LAST:event_jBtnModificarActionPerformed

    private void jBtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAgregarActionPerformed
        //Este metodo agrega un nuevo transporte al sistema

        try {
            if (!this.jTxtFil.getText().isEmpty() && !this.jTxtCol.getText().isEmpty() && (this.jTxtTipo.getText().equalsIgnoreCase("Bus") || this.jTxtTipo.getText().equalsIgnoreCase("Buseta"))) { //verifica los datos
                transporte = new Transporte(Integer.parseInt(this.jTxtFil.getText()), Integer.parseInt(this.jTxtCol.getText()), this.jTxtTipo.getText()); //se crea un objeto con los datos ingresados
                this.datos.guardar(transporte); //se guarda el objeto
                System.out.println("Guardado exitoso");

                if (transporte.getTipo().equalsIgnoreCase("bus")) { //si el tipo es un bus
                    this.terminal1.add(transporte); //se annade a la cola de terminal 1
                    this.actualizarrutabus();
                } else {
                    this.arbolturismo.insertar(transporte); //si es de tipo turismo, se annade al arbol
                }

                this.limpiarmantenimiento();
                this.llenartabla();
                this.llenarcomboturismo();
                this.actualizarestacionamiento();

            } else {
                JOptionPane.showMessageDialog(null, "Hay datos vacios o incorrecto valor de Bus o buseta");
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al agregar.  Esta ingresando tipo de dato correcto?");
        }
    }//GEN-LAST:event_jBtnAgregarActionPerformed

    private void jTblMantenimientoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTblMantenimientoMouseClicked
        //Este metodo se usa para saber cuando se selecciono un objeto dentro de la tabla
        int row = this.jTblMantenimiento.getSelectedRow(); //se obtiene la fila seleccionada
        String value = this.jTblMantenimiento.getModel().getValueAt(row, 0).toString(); //se obtiene el valor
        this.jTxtID.setText(value); //se da valor a ID
        value = this.jTblMantenimiento.getModel().getValueAt(row, 1).toString();//se obtiene el valor
        this.jTxtTipo.setText(value); //se da valor a tipo
        value = this.jTblMantenimiento.getModel().getValueAt(row, 2).toString();//se obtiene el valor
        this.jTxtFil.setText(value); //se da valor a filas
        value = this.jTblMantenimiento.getModel().getValueAt(row, 3).toString();//se obtiene el valor
        this.jTxtCol.setText(value); //se da valor a columnas
    }//GEN-LAST:event_jTblMantenimientoMouseClicked

    private void jTblMantenimientoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTblMantenimientoFocusGained

    }//GEN-LAST:event_jTblMantenimientoFocusGained

    private void jBtnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRegresarActionPerformed
        //Se retorna un transporte de turismo que se encuentra en ruta

        try {
            transporte = (Transporte) this.jCbbListaturismo.getSelectedItem(); //obtiene el objeto seleccionado del combobox
            transporte.setEnruta(false); //se le define que ya no este en ruta

            String pasajeros[][] = new String[transporte.getAsientofil()][transporte.getAsientocol()]; //se crea una matriz de los pasajeros

            for (int i = 0; i < transporte.getAsientofil(); i++) {
                for (int j = 0; j < transporte.getAsientocol(); j++) { //se recorre la matriz

                    pasajeros[i][j] = ""; //se reinician los pasajeros a BLANK

                }
            }
            transporte.setPasajeros(pasajeros); //se le da los pasajeros al parametro
            this.datos.modificar(transporte); //se modifica
            this.llenarcomboturismo();
            this.llenartabla();
            this.actualizarestacionamiento();

        } catch (Exception e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al alquilar, revise la consola");
        }
    }//GEN-LAST:event_jBtnRegresarActionPerformed

    private void jBtnAlquilarTurismoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnAlquilarTurismoActionPerformed
        //Este metodo sirve para alquitar una buseta turistica

        try {
            transporte = (Transporte) this.jCbbListaturismo.getSelectedItem(); //obtiene el objeto seleccionado del combobox

            String pasajeros[][] = new String[transporte.getAsientofil()][transporte.getAsientocol()]; //se crea una matriz de pasajeros

            for (int i = 0; i < transporte.getAsientofil(); i++) {
                for (int j = 0; j < transporte.getAsientocol(); j++) { //se recorre la matriz
                    String pasajero = JOptionPane.showInputDialog("Ingrese el nombre del pasajero en el asiento " + (i + 1) + "," + (j + 1)); //se le pide al usuario que ingrese el nombre de los pasajeros en cada campo de la matriz
                    pasajeros[i][j] = pasajero; //se le da el nombre al campo de la matriz

                }
            }
            transporte.setPasajeros(pasajeros); //se le da los pasajeros al parametro
            transporte.setEnruta(true); //se pone en ruta
            this.datos.modificar(transporte); //se modifica
            this.llenarcomboturismo();
            this.llenartabla();
            this.actualizarestacionamiento();

        } catch (Exception e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al alquilar, revise la consola");
        }
    }//GEN-LAST:event_jBtnAlquilarTurismoActionPerformed

    private void jCbbListaturismoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCbbListaturismoItemStateChanged
        //este metodo sirve para detectar cuando se ha seleccionado un objeto en el combobox

        try {
            String nombres = ""; //crea una variable nombres, sera usada para el jtxt de pasajeros
            if (jCbbListaturismo.getSelectedIndex() != -1) { //verifica que el indez no sea -1 para evitar errores
                transporte = (Transporte) this.jCbbListaturismo.getSelectedItem(); //crea un parametro de lo seleccionado en el combo box
                if (transporte.isEnruta() == true) { //verifica si se encuentra en ruta
                    String pasajeros[][] = transporte.getPasajeros(); //se crea una matriz pasajeros con el valor del parametro
                    this.jBtnAlquilarTurismo.setEnabled(false); //se inhabilita la renta
                    this.jBtnRegresar.setEnabled(true); //se habilita el regreso del transporte
                    for (int i = 0; i < transporte.getAsientofil(); i++) {
                        for (int j = 0; j < transporte.getAsientocol(); j++) { //se recorre la matriz
                            nombres += "  " + pasajeros[i][j]; //se obtiene los nombres de los pasajeros
                        }
                        nombres += "\n" + "\n"; //espacio en blanco.
                        this.jTxtNombrePasajeros.setText(nombres); //al jtxt se le da el valor de todos los nombres de los pasajeros actuales
                    }
                } else {
                    if (transporte.isEnruta() == false) { //si no se encuentra en ruta
                        this.jBtnAlquilarTurismo.setEnabled(true); //se habilita la renta
                        this.jBtnRegresar.setEnabled(false); //se inhabilita el regreso
                        this.jTxtNombrePasajeros.setText(""); //al jtxt se le da el valor de BLANK ya que no hay pasajeros
                    }
                }
            }

        } catch (Exception e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(null, "Error al seleccionar objeto, esto no deberia haber ocurrido? Revise el error en la consola.");
        }
    }//GEN-LAST:event_jCbbListaturismoItemStateChanged

    private void jBtnMayorMenorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnMayorMenorActionPerformed
        this.jTxtOrdenamientoturismo.setText(this.arbolturismo.mayormenor());
    }//GEN-LAST:event_jBtnMayorMenorActionPerformed

    private void jBtnMenorMayorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnMenorMayorActionPerformed
        this.jTxtOrdenamientoturismo.setText(this.arbolturismo.menormayor());
    }//GEN-LAST:event_jBtnMenorMayorActionPerformed

    private void llenarcomboturismo() {
        //Este metodo sirve para llenar el combobox y actualizarlo con nuevos objetos

        this.jCbbListaturismo.setSelectedIndex(-1); //se le asigna el index seleccionado a -1 para evitar errores
        this.jCbbListaturismo.removeAllItems(); //Se remueven todos los items del combobox
        for (int i = 0; i < this.datos.retornarTodos().size(); i++) { //se recorre los datos
            this.transporte = (Transporte) this.datos.retornarTodos().get(i); //se crea un parametro de i
            if (transporte.getTipo().equalsIgnoreCase("buseta")) { //si el transporte es una buseta

                this.jCbbListaturismo.addItem(transporte); //se annade la buseta al combobox

            }
        }
    }

    private void limpiarmantenimiento() {
        //este metodo sirve para limpiar los campos del mantenimiento.

        this.jTxtID.setText("");
        this.jTxtTipo.setText("");
        this.jTxtFil.setText("");
        this.jTxtCol.setText("");
        this.jTxtTipo.setEditable(true);
    }

    private void actualizarrutaturismo() {

    }

    private void actualizarestacionamiento() {
        //Este metodo actualiza constantemente el estacionamiento cuando hay cambios

        int cont = 0; //contador

        try {
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    this.estacionamiento[i][j] = "Vacio   "; //se recorre el estacionamiento y a todos los campos se le da vacio
                }

            }

            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) { //recorre el estacionamiento
                    if (cont < this.datos.retornarTodos().size()) { //si el contador es menor que el tamanno del array datos
                        transporte = (Transporte) this.datos.retornarTodos().get(cont); //se crea un parametro con el valor de cont
                        cont++; //se aumenta el contador

                        if (transporte.isEnruta() == false) { //si no se encuentra en ruta
                            this.estacionamiento[i][j] = String.valueOf(transporte.getPlaca()) + "   "; //se annade al estacionamiento

                        }

                    }
                }
            }

            String h = ""; //se crea un string
            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) { //se recorre el estacionamiento
                    h += this.estacionamiento[i][j]; //se annade todos los campos al string
                }
                h += "\n" + "\n"; //espacio en blanco
            }

            this.jTxtEstacionamiento.setText(h); //al jtxt de estaconamiento se le da el valor del string
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error en estacionamiento, revise la consola");
            System.out.println(e.getMessage());
        }

    }

    private void actualizarrutabus() {
        //actualiza las colas y los textos a mostrar en la Ruta de bus

        String h = ""; //se crea un string
        this.jTxtTerminal1bus.setText(this.terminal1.llegada()); //a la terminal 1 se le da el tostring de llegada
        this.jTxtRutabus.setText(this.rutabus.salida()); //a la ruta se le da el tostring de salida
        this.jTxtTerminal2bus.setText(this.terminal2.llegada());//a la terminal 2 se le da el tostring de llegada

        for (int i = 0; i < datos.retornarTodos().size(); i++) { //recorre los datos
            transporte = (Transporte) datos.retornarTodos().get(i); //se crea un parametrp
            if (transporte.getTipo().equalsIgnoreCase("bus")) { //si el tipo es un bus
                h += "Bus " + transporte.getPlaca() + " En ruta: " + transporte.isEnruta() + " En terminal: " + transporte.isEstacionamiento() + "\n"; //se annade los datos del bus al string
                this.jTxtEstadoBus.setText(h); //se annade el texto de al jtxt de estado
            }

        }
    }

    private void precargar() {
        //Este metodo precarga datos al sistema antes de inciar para ahorrar tiempo
        //se crean 2 transportes de cada tipo
        Transporte bus1 = new Transporte(2, 5, "Bus");
        Transporte bus2 = new Transporte(4, 7, "Bus");
        Transporte buseta1 = new Transporte(1, 3, "Buseta");
        Transporte buseta2 = new Transporte(2, 2, "Buseta");
        //se guardan
        datos.guardar(bus1);
        datos.guardar(bus2);
        datos.guardar(buseta1);
        datos.guardar(buseta2);

        for (int i = 0; i < datos.retornarTodos().size(); i++) { //se recorre los datos
            transporte = (Transporte) datos.retornarTodos().get(i); //se crea un parametro
            if (transporte.getTipo().equalsIgnoreCase("bus")) { //si el tipo es bus

                this.terminal1.add(transporte); //se annade a la terminal 1
            }

            this.actualizarrutabus();
        }

        //se insertan las busetas al arbol
        arbolturismo.insertar(buseta1);
        arbolturismo.insertar(buseta2);

    }

    private void llenartabla() {
        //Este metodo sirve para llenar la tabla con los datos actualizados

        try {
            DefaultTableModel model = (DefaultTableModel) this.jTblMantenimiento.getModel(); //se obtiene el modelo de la tabla
            model.setRowCount(0); //se limpia el modelo de la tabla
            for (int i = 0; i < datos.retornarTodos().size(); i++) { //se recorre los datos
                transporte = (Transporte) datos.retornarTodos().get(i); //se crea un parametro
                model.addRow(new Object[]{transporte.getPlaca(), transporte.getTipo(), transporte.getAsientofil(), transporte.getAsientocol(), transporte.getCantidad()}); //a cada fila de la tabla se le da los datos del transporte
            }
        } catch (Exception e) {

            System.out.println(e.getMessage());
            System.out.println("ERROR AL LLENAR TABLA");
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameTerminalBus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameTerminalBus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameTerminalBus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameTerminalBus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameTerminalBus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnActualizarrutabus;
    private javax.swing.JButton jBtnAgregar;
    private javax.swing.JButton jBtnAlquilarTurismo;
    private javax.swing.JButton jBtnEliminar;
    private javax.swing.JButton jBtnLimpiar;
    private javax.swing.JButton jBtnMayorMenor;
    private javax.swing.JButton jBtnMenorMayor;
    private javax.swing.JButton jBtnModificar;
    private javax.swing.JButton jBtnRegresar;
    private javax.swing.JButton jBtnSalirBus1;
    private javax.swing.JButton jBtnSalirRutaBus;
    private javax.swing.JButton jBtnSalirterminalbus2;
    private javax.swing.JComboBox<Transporte> jCbbListaturismo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLblColumnas;
    private javax.swing.JLabel jLblEstadoBus;
    private javax.swing.JLabel jLblFilas;
    private javax.swing.JLabel jLblListaturismo;
    private javax.swing.JLabel jLblMantenimiento;
    private javax.swing.JLabel jLblPasajerosactuales;
    private javax.swing.JLabel jLblPlaca;
    private javax.swing.JLabel jLblRutaBus;
    private javax.swing.JLabel jLblTerminal1Bus;
    private javax.swing.JLabel jLblTerminal2bus;
    private javax.swing.JLabel jLblTipo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPnlRutabus;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable jTblMantenimiento;
    private javax.swing.JTabbedPane jTpMENUS;
    private javax.swing.JTextField jTxtCol;
    private javax.swing.JTextArea jTxtEstacionamiento;
    private javax.swing.JTextArea jTxtEstadoBus;
    private javax.swing.JTextField jTxtFil;
    private javax.swing.JTextField jTxtID;
    private javax.swing.JTextArea jTxtNombrePasajeros;
    private javax.swing.JTextArea jTxtOrdenamientoturismo;
    private javax.swing.JTextArea jTxtRutabus;
    private javax.swing.JTextArea jTxtTerminal1bus;
    private javax.swing.JTextArea jTxtTerminal2bus;
    private javax.swing.JTextField jTxtTipo;
    // End of variables declaration//GEN-END:variables
    private Transportedatos datos = new Transportedatos(); //Datos del sistema
    private Transporte transporte; //Parametro de transporte
    private ArrayList arraybus;
    private ArrayList arrabuseta;
    private ColaBus terminal1 = new ColaBus(); //cola de la terminal 1
    private ColaBus terminal2 = new ColaBus(); //cola de la terminal 2
    private ColaBus rutabus = new ColaBus(); //cola de la ruta
    private NodoTurismo nodoturismo;
    private ArbolTurismo arbolturismo = new ArbolTurismo(); //arbol de busetas
    private String[][] estacionamiento = new String[10][10]; //Matriz del estacionamiento, se puede modificar cambiando los valores :)

    private NodoBus nodobus;

}
